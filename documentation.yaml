swagger: "2.0"

info:
  description: "API Rest that performs the calculation of expenses incurred
    in a route that includes fixed and variable expenses as well as the costs
    incurred in tolls according to the route."
  version: "1.2"
  title: "LaDificil"
  contact:
    email: "fulldevs0@gmail.com"
  host: "https://dazzling-noether-69888d.netlify.app/"
  schemes: ["http"]

basePath: "/api/"

tags:
- name: "tolls"
  description: "This will show the tolls"

- name: "Costs"
  description: "If you want to see how the API looks like"
  externalDocs:
    description: "This will provide the porpouse of the app"
    url: "https://dazzling-noether-69888d.netlify.app/"

- name: "Vehicles"
  description: "Will provide of calculation we have for vehicles"
  externalDocs:
    description: "Find out more information in the sections"
    url: "http://swagger.io"
schemes: ["http", "https"]
paths:
  /tolls:
    get:
      tags:
      - "tolls"
      summary: "You will get the total list of tolls"
      description:
        "Will get the list of tolls how contains his owns categories and features of the tolls"
      consumes: "application/json"
      produces: "application/json"
      responses:
        - 200: description: OK
        - 405: description: "Invalid input"

    post:
      tags: "tolls"
      summary: "Create a new toll before to search in te algorithm"
      consumes: "application/json"
      produces: "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "ID of contact to be deleted"
          required: true
          type: "string"
          schema:
            $ref: "#/definitions/Tolls"
      responses:
        200:
          description: OK
        500:
          description: "Server Error"
    post:

      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"


  /api/vehicle/:
    get:
      summary: "You will get the total list of vehicles"
      description:
        "Will get the list of vehicles how contains his owns categories and features of the car"
      produces:
        - "application/json"
      responses:
        200:
          description: OK

    post:
      summary: "a√±ade un pago a un inmueble especificado por el id del inmueble y el documento de identidad solo se puede pagar en dias impares"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "ID of contact to be deleted"
          required: true
          type: "string"
          schema:
            $ref: "#/definitions/Pago"
      responses:
        200:
          description: OK
        500:
          description: "Server Error"



#   department: { type: String, default: '' },
#   status: { type: Boolean, default: true },
#   group: { type: Number, default: 2 }
# }, { versionKey: false });

definitions:
  Toll:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Id of the toll"
      name:
        type: "string"
        # description: "The name of the toll"
      coordinates:
        type: "object"
      operator:
        type: "string"
        description: "Is wich company manage this toll"
      direction:
        type: "integer"
        format: "int64"
        description: "It is in what sense you have to pay at the toll"
      costs:
        type: "integer"
        format: "object"
        description: "Is how cost the category of the vehicle in the toll"
      update_at:
        type: "string"
        format: "date-time"
      department:
        type: "string"
      status:
        type: "integer"
        format: "int64"
        description: "To see if the toll is in operation"
        enum:
          - 0
          - 1
      group:
        type: "integer"
        format: "int64"
        description: "It is to formalize the tolls and use standard values"
        min: 0
        max: 8
    xml:
      name: "Toll"


  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
    enum:
      - "available"
      - "pending"
      - "sold"
  Vehicles:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
